# -*- coding: utf-8 -*-
import numpy as np
# import itertools as it


def combination(n: int, k: int):
    return np.math.factorial(n)/np.math.factorial(k)/np.math.factorial(n - k)


# %% 1
# 1. Из колоды в 52 карты извлекаются случайным образом 4 карты.

# a) Найти вероятность того, что все карты – крести.
# P(A1*A2*A3*A4) = P(A1) * P(A2|A1) * P(A3|A1A2) * P(A3|A1A2A3)
P1 = 13 / 52 * 12 / (52 - 1) * 11 / (52 - 2) * 10 / (52 - 3)
# Либо через сочетания:
P11 = combination(13, 4) / combination(52, 4)
print(f"1a. P = {P1:.4f}")
print(f"1a. P = {P11:.4f}")

# б) Найти вероятность, что среди 4-х карт окажется хотя бы один туз.
print(f"1b. P = {1 - (combination(48, 4)/combination(52, 4)):.4f}")

# %% 2
# 2. На входной двери подъезда установлен кодовый замок,
# содержащий десять кнопок с цифрами от 0 до 9.
# Код содержит три цифры, которые нужно нажать одновременно.
# Какова вероятность того, что человек, не знающий код,
# откроет дверь с первой попытки?

# Видимо, если цифры нужно нажать одновременно, то код состоит из трёх
# *различных* цифр
# P = 1 / A(10, 3)
print(f"2. P = {np.math.factorial(7)/np.math.factorial(10):.4f}")

# %% 3
# 3. В ящике имеется 15 деталей, из которых 9 окрашены.
# Рабочий случайным образом извлекает 3 детали.
# Какова вероятность того, что все извлеченные детали окрашены?

print(f"3. P = {(combination(9, 3)/combination(15, 3)):.4f}")

# %%
# 4. В лотерее 100 билетов. Из них 2 выигрышных. Какова вероятность того,
# что 2 приобретенных билета окажутся выигрышными?

print(f"3. P = {(combination(2, 2)/combination(100, 2)):.4f}")

